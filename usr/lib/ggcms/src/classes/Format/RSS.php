<?php

	class RSS extends AbstractBaseFormat {
			// XML MimeType
			// -----------------------------------------------
		
		public function MimeType() {
			return 'application/rss+xml';
		}
		
		public function DefaultVersion() {
			return '2.0';
		}
		
			// Display RSS
			// -----------------------------------------------
		
		public function Display() {
			if($this->human_readable) {
				$this->section_separator = "\n\n";
				$this->line_separator = "\n";
				
				$this->indent_levels = [
					1=>"\t",
					2=>"\t\t",
					3=>"\t\t\t",
					4=>"\t\t\t\t",
					5=>"\t\t\t\t\t",
				];
			} else {
				$this->section_separator = '';
				$this->line_separator = '';
				
				$this->indent_levels = [
					1=>'',
					2=>'',
					3=>'',
					4=>'',
					5=>'',
				];
			}
			
			$this->SetVersion();
			if(!$this->RunScript()) {
				return FALSE;
			}
			
			$this->SetFileNameDisplay();
			$this->HandleHTTPHeaders();
			
		#	$this->StartDocument();
		#	
			print($this->ConvertHTMLToFormat());
		#	
		#	$this->EndDocument();
			
			return TRUE;
		}
		
		public function SetVersion() {
			$this->version = $this->script->Param('version');
			
			$acceptable_versions = [
				'0.91'=>TRUE,
				'0.92'=>TRUE,
		#		'1.0'=>TRUE,		# TODO: Implement this eventually.
				'2.00'=>TRUE,
			];
			
			if(!$acceptable_versions[$this->version]) {
				$this->version = $this->DefaultVersion();
			}
			
			$this->version_float = floatval($this->version);
			
			return TRUE;
		}
		
		public function ConvertHTMLToFormat() {
			$this->RunTemplates();
			
			$xml_rss_content = '<?xml version="1.0" encoding="UTF-8" ?>' . $this->section_separator;
			if($this->version_float === 0.91) {
				$xml_rss_content .= '<!DOCTYPE rss PUBLIC "-//Netscape Communications//DTD RSS 0.91//EN" "http://my.netscape.com/publish/formats/rss-0.91.dtd">' . $this->section_separator;
			}
			$xml_rss_content .= '<rss version="' . $this->version . '">' . $this->section_separator;
			
			$xml_rss_content .= $this->indent_levels[1] . '<channel>' . $this->section_separator;
			$xml_rss_content .= $this->indent_levels[2] . '<language>en</language>' . $this->line_separator;
			
			$title = $this->script->entry['Title'];
			if($this->script->entry['SubTitle']) {
				$title .= ': ' . $this->script->entry['SubTitle'];
			}
			
			$xml_rss_content .= $this->indent_levels[2] . '<title>' . $title . '</title>' . $this->line_separator;
			$xml_rss_content .= $this->indent_levels[2] . '<ttl>60</ttl>' . $this->line_separator;		# TODO: globals, per RSS-types only?

			$base_url = $this->handler->domain->GetPrimaryDomain(['lowercase'=>1, 'www'=>1])  . '/';
			
			$record_list_count = count($this->script->record_list);
			
			if($record_list_count > 0) {
				for($i = 0; $i < $record_list_count; $i++) {
					$record = $this->script->record_list[$i];
					$base_url .= $record['Code'] . '/';
				}
				
				$url .= $base_url . 'view.php?action=index';
			} else {
				$url = $base_url;
			}
			
			$xml_rss_content .= $this->ConvertHTMLToFormat_renderImage(['link'=>$url]);
			
			$extra = '';
			
			if($this->human_readable) {
				$extra = '?humanreadable=1';
			}
			
		#	$xml_rss_content .= $this->indent_levels[2] . '<link href="' . $base_url . 'news.rss' . $extra . '" rel="self" type="application/rss+xml">' . $base_url . 'news.rss' . $extra . '</link>' . $this->line_separator;
			$xml_rss_content .= $this->indent_levels[2] . '<atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/rss+xml" href="' . $url . 'news.rss" />' . $this->line_separator;
			$xml_rss_content .= $this->indent_levels[2] . '<link>' .  $url . '</link>' . $this->line_separator;
			
			$xml_rss_content .= $this->indent_levels[2] . '<pubDate>' . date('r', strtotime($this->script->entry['OriginalCreationDate'])) . '</pubDate>' . $this->line_separator;
			
			$xml_rss_content .= $this->indent_levels[2] . '<lastBuildDate>' . date('r', strtotime($this->ConvertHTMLToFormat_lastBuildDate())) . '</lastBuildDate>' . $this->line_separator;
			
			$description = $this->script->getDescription();
			if($description) {
				$xml_rss_content .= $this->indent_levels[2] . '<description>' . $description . '</description>' . $this->line_separator;
			}
			
			if($this->version_float >= 2) {
				$xml_rss_content .= $this->indent_levels[2] . '<copyright>The contents of this feed is in the Public Domain.</copyright>' . $this->line_separator;
				$xml_rss_content .= $this->indent_levels[2] . '<generator>RSS Feed Generated by ' . $this->handler->version->GetSoftwareNameAcronymAndVersion() . ', Released Under BSD 3-Clause License.</generator>' . $this->line_separator;
			} else {
				$xml_rss_content .= $this->indent_levels[2] . '<copyright>RSS Feed Generated by ' . $this->handler->version->GetSoftwareNameAcronymAndVersion() . ', Released Under BSD 3-Clause License.  The contents of this feed are otherwise in the Public Domain.</copyright>' . $this->line_separator;
			}
			
			$xml_rss_content .= $this->indent_levels[2] . '<docs>' . $base_url . 'news.php?action=docs' . '</docs>' . $this->line_separator;
			
			$xml_rss_content .= $this->indent_levels[2] . '<managingEditor>' . $this->handler->globals->AdminEmailAddress() . ' (' . $this->handler->globals->AdminName() . ')' . '</managingEditor>' . $this->line_separator;
			$xml_rss_content .= $this->indent_levels[2] . '<webMaster>' . $this->handler->globals->AdminEmailAddress() . ' (' . $this->handler->globals->AdminName() . ')' . '</webMaster>' . $this->section_separator;
			
			$xml_rss_content .= $this->ConvertHTMLToFormat_renderContent();
			
			$xml_rss_content .= $this->indent_levels[1] . '</channel>' . $this->section_separator;
			
			$xml_rss_content .= '</rss>';
			
			return $xml_rss_content;
		}
		
		public function getEntries() {
			if($this->entries) {
				return $this->entries;
			}
			
			if($this->script->newest_entries) {
				return $this->entries = $this->script->newest_entries;
			}
			
			if($this->script->children) {
				return $this->entries = $this->script->children;
			}
		}
		
		public function ConvertHTMLToFormat_lastBuildDate() {
			if($this->getEntries()) {
				$entry = $this->getEntries()[0];
				$entry_date = $entry['OriginalCreationDate'];
			}
			
			if($entry_date > $this->script->entry['LastModificationDate']) {
				return $entry_date;
			}
			
			return $this->script->entry['LastModificationDate'];
		}
		
		public function ConvertHTMLToFormat_renderImage($args) {
			$link = $args['link'];
			
			$images = $this->script->entry['image'];
			$image = $images[0];
			
			$image_content = '';
			$image_content .= $this->indent_levels[2] . '<image>' . $this->line_separator;
			
			$image_content .= $this->indent_levels[3] . '<title>';
			$image_content .= $image['Title'];
			$image_content .= '</title>' . $this->line_separator;
			
			$image_content .= $this->indent_levels[3] . '<url>';
			$image_content .= $this->handler->domain->GetPrimaryDomain(['lowercase'=>1, 'www'=>1])  . '/image/';
			$image_content .= implode('/', str_split($image['FileDirectory'])) . '/';
			$image_content .= urlencode($image['IconFileName']);
			$image_content .= '</url>' . $this->line_separator;
			
			$image_content .= $this->indent_levels[3] . '<link>';
			$image_content .= $link;
			$image_content .= '</link>' . $this->line_separator;
			
			if($image['Description']) {
				$image_content .= $this->indent_levels[3] . '<description>';
				$image_content .= $image['Description'];
				$image_content .= '</description>' . $this->line_separator;
			}
			
			$image_content .= $this->indent_levels[3] . '<width>';
			$image_content .= ceil((int)$image['IconPixelWidth']/1.4);
			$image_content .= '</width>' . $this->line_separator;
			
			$image_content .= $this->indent_levels[3] . '<height>';
			$image_content .= ceil((int)$image['IconPixelHeight']/1.4);
			$image_content .= '</height>' . $this->line_separator;
			
			$image_content .= $this->indent_levels[2] . '</image>' . $this->line_separator;
			
			return $image_content;
		}
		
		public function ConvertHTMLToFormat_renderContent() {
			$domain = $this->handler->domain->GetPrimaryDomain(['lowercase'=>1, 'www'=>1])  . '/';
			$content = '';
	#		print("BT:");
	#		print_r($this->script->record_list);
	#		print_r($this->script->parent);
			if($this->getEntries()) {
				$newest_entries_count = count($this->getEntries());
				if($newest_entries_count > 0) {
					for($i = 0; $i < $newest_entries_count; $i++) {
						$newest_entry = $this->getEntries()[$i];
						
						$content .= $this->indent_levels[2] . '<item>' . $this->line_separator;
						
						$content .= $this->indent_levels[3] . '<title>';
						
						if($newest_entry['GrandParent_Title']) {
							$content .= '[' . $newest_entry['GrandParent_Title'] . '] ';
							$content .= $newest_entry['Parent_Title'] . ' -- ';
						} elseif($newest_entry['Parent_Title']) {
							$content .= $newest_entry['Parent_Title'] . ' -- ';
						}
						
						$content .= $newest_entry['Title'];
						
						if($newest_entry['Subtitle']) {
							$content .= ': ' . $newest_entry['Subtitle'];
						}
						
						$content .= '</title>' . $this->line_separator;
						
						$child_link = $domain;
						
						if($newest_entry['GrandParent_Code']) {
							$child_link .= $newest_entry['GrandParent_Code'] . '/';
						}
						
						if($newest_entry['Parent_Code']) {
							$child_link .= $newest_entry['Parent_Code'] . '/';
						}
						
						$child_link .= $newest_entry['Code'] . '/';
						
						$content .= $this->indent_levels[3] . '<link>' . $child_link . '</link>' . $this->line_separator;
						
						if($this->version_float >= 2) {
							$content .= $this->indent_levels[3] . '<pubDate>' . date('r', strtotime($newest_entry['OriginalCreationDate'])) . '</pubDate>' . $this->line_separator;
							$content .= $this->indent_levels[3] . '<comments>' . $child_link . 'view.php#comments' . '</comments>' . $this->line_separator;
						}
						
						if($this->version_float >= 0.92 && strlen($this->script->parent['ChildNoun']) > 0) {
							$content .= $this->indent_levels[3] . '<category>' . $this->script->parent['ChildNoun'] . '</category>' . $this->line_separator;
						}
						
						$description = $this->ConvertHTMLToFormat_renderContent_FormattedDescription(['entry'=>$newest_entry]);
						if($description) {
							$content .= $this->indent_levels[3] . '<description>' . $description . '</description>' . $this->line_separator;
						} else {
							$content .= $this->indent_levels[3] . '<description>New ' . $this->script->parent['GrandChildNoun'] . ' with ' . $newest_entry['Count'] . ' chapters.</description>' . $this->line_separator;
						}
						$content .= $this->indent_levels[3] . '<guid>' . $domain . '?id=' . $newest_entry['PermaLinkid'] . '</guid>' . $this->line_separator;
						
						$content .= $this->indent_levels[2] . '</item>' . $this->section_separator;
					}
					
					return $content;
				}
			}
		}
		
		public function ConvertHTMLToFormat_renderContent_FormattedDescription($args) {
			$description = $this->ConvertHTMLToFormat_renderContent_Description($args);
			$description = $this->ConvertHTMLToFormat_cleanupText(['text'=>$description]);
			
			if($this->version_float === 0.91 && strlen($description) > 500) {
				$description = trim(substr($description, 0, 497));
			}
			
			if($description) {
				$description .= '...';
			}
			
			return $description;
		}
		
		public function ConvertHTMLToFormat_renderContent_Description($args) {
			$entry = $args['entry'];
			
			if($entry['description'] && $entry['description'][0] && $entry['description'][0]['Description']) {
				return $entry['description'][0]['Description'];
			}
			
			if($entry['textbody'] && $entry['textbody'][0] && $entry['textbody'][0]['FirstThousandCharacters']) {
				$text = $entry['textbody'][0]['FirstThousandCharacters'];
				
				return $text;
			}
		}
		
		public function ConvertHTMLToFormat_cleanupText($args) {
			$text = $args['text'];
			
			$cleanup_swaps = [
				'<br>'=>' ',
				'<br >'=>' ',
				'<br />'=>' ',
				'</p>'=>'</p> ',
				"\n"=>' ',
				"\r"=>' ',
				"\t"=>' ',
			];
			
			$text = str_replace(array_keys($cleanup_swaps), array_values($cleanup_swaps), $text);
			
			$text = strip_tags($text);
			
			$text = trim(preg_replace('/[\s]+/', ' ', $text));
			
			$text = html_entity_decode($text);
			
			$text = str_replace(['<', '>', '&',], ['&lt;', '&gt;', '&amp;'], $text);
			$text = preg_replace('/Image::(\d+)/', '', $text);
			
			return $text;
		}
	}

?>